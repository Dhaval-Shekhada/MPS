package FirstLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class workbook_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public workbook_NonTypesystemRule() {
  }
  public void applyRule(final SNode workbook, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<String> varName = SetSequence.fromSet(new HashSet<String>());
    for (SNode variable : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(workbook, LINKS.content$Jm97), CONCEPTS.Variable$rK))) {
      if (SetSequence.fromSet(varName).contains(SPropertyOperations.getString(variable, PROPS.name$tAp1))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variable, "Duplicate Name Error :" + SPropertyOperations.getString(variable, PROPS.name$tAp1), "r:d7cecf31-6279-4e7d-9549-15abd87eee34(FirstLanguage.typesystem)", "7695600049411054141", null, errorTarget);
        }
      }
      SetSequence.fromSet(varName).addElement(SPropertyOperations.getString(variable, PROPS.name$tAp1));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Workbook$h6;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$Jm97 = MetaAdapterFactory.getContainmentLink(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485bfL, 0x74b97e2ac55485c4L, "content");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Variable$rK = MetaAdapterFactory.getConcept(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c0L, "FirstLanguage.structure.Variable");
    /*package*/ static final SConcept Workbook$h6 = MetaAdapterFactory.getConcept(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485bfL, "FirstLanguage.structure.Workbook");
  }
}
