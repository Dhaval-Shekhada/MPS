package FirstLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBinaryArithmaicOperations = createDescriptorForBinaryArithmaicOperations();
  /*package*/ final ConceptDescriptor myConceptBinaryComaprisionExpression = createDescriptorForBinaryComaprisionExpression();
  /*package*/ final ConceptDescriptor myConceptBinaryExpression = createDescriptorForBinaryExpression();
  /*package*/ final ConceptDescriptor myConceptBooleanType = createDescriptorForBooleanType();
  /*package*/ final ConceptDescriptor myConceptDivExpression = createDescriptorForDivExpression();
  /*package*/ final ConceptDescriptor myConceptEmptyStatement = createDescriptorForEmptyStatement();
  /*package*/ final ConceptDescriptor myConceptEqualExpression = createDescriptorForEqualExpression();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptExpressionStatement = createDescriptorForExpressionStatement();
  /*package*/ final ConceptDescriptor myConceptGreaterEqualExpression = createDescriptorForGreaterEqualExpression();
  /*package*/ final ConceptDescriptor myConceptGreaterThanExpression = createDescriptorForGreaterThanExpression();
  /*package*/ final ConceptDescriptor myConceptIntegerType = createDescriptorForIntegerType();
  /*package*/ final ConceptDescriptor myConceptLessThanEqualExpression = createDescriptorForLessThanEqualExpression();
  /*package*/ final ConceptDescriptor myConceptLessThanExpression = createDescriptorForLessThanExpression();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = createDescriptorForMinusExpression();
  /*package*/ final ConceptDescriptor myConceptMulExpression = createDescriptorForMulExpression();
  /*package*/ final ConceptDescriptor myConceptMyType = createDescriptorForMyType();
  /*package*/ final ConceptDescriptor myConceptNotEqualExpression = createDescriptorForNotEqualExpression();
  /*package*/ final ConceptDescriptor myConceptNumberLiteral = createDescriptorForNumberLiteral();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptStringLateral = createDescriptorForStringLateral();
  /*package*/ final ConceptDescriptor myConceptStringType = createDescriptorForStringType();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptWorkbook = createDescriptorForWorkbook();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBinaryArithmaicOperations, myConceptBinaryComaprisionExpression, myConceptBinaryExpression, myConceptBooleanType, myConceptDivExpression, myConceptEmptyStatement, myConceptEqualExpression, myConceptExpression, myConceptExpressionStatement, myConceptGreaterEqualExpression, myConceptGreaterThanExpression, myConceptIntegerType, myConceptLessThanEqualExpression, myConceptLessThanExpression, myConceptMinusExpression, myConceptMulExpression, myConceptMyType, myConceptNotEqualExpression, myConceptNumberLiteral, myConceptPlusExpression, myConceptStatement, myConceptStringLateral, myConceptStringType, myConceptVariable, myConceptWorkbook);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BinaryArithmaicOperations:
        return myConceptBinaryArithmaicOperations;
      case LanguageConceptSwitch.BinaryComaprisionExpression:
        return myConceptBinaryComaprisionExpression;
      case LanguageConceptSwitch.BinaryExpression:
        return myConceptBinaryExpression;
      case LanguageConceptSwitch.BooleanType:
        return myConceptBooleanType;
      case LanguageConceptSwitch.DivExpression:
        return myConceptDivExpression;
      case LanguageConceptSwitch.EmptyStatement:
        return myConceptEmptyStatement;
      case LanguageConceptSwitch.EqualExpression:
        return myConceptEqualExpression;
      case LanguageConceptSwitch.Expression:
        return myConceptExpression;
      case LanguageConceptSwitch.ExpressionStatement:
        return myConceptExpressionStatement;
      case LanguageConceptSwitch.GreaterEqualExpression:
        return myConceptGreaterEqualExpression;
      case LanguageConceptSwitch.GreaterThanExpression:
        return myConceptGreaterThanExpression;
      case LanguageConceptSwitch.IntegerType:
        return myConceptIntegerType;
      case LanguageConceptSwitch.LessThanEqualExpression:
        return myConceptLessThanEqualExpression;
      case LanguageConceptSwitch.LessThanExpression:
        return myConceptLessThanExpression;
      case LanguageConceptSwitch.MinusExpression:
        return myConceptMinusExpression;
      case LanguageConceptSwitch.MulExpression:
        return myConceptMulExpression;
      case LanguageConceptSwitch.MyType:
        return myConceptMyType;
      case LanguageConceptSwitch.NotEqualExpression:
        return myConceptNotEqualExpression;
      case LanguageConceptSwitch.NumberLiteral:
        return myConceptNumberLiteral;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.StringLateral:
        return myConceptStringLateral;
      case LanguageConceptSwitch.StringType:
        return myConceptStringType;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.Workbook:
        return myConceptWorkbook;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBinaryArithmaicOperations() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "BinaryArithmaicOperations", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b05L);
    b.class_(false, true, false);
    b.super_("FirstLanguage.structure.BinaryExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5569c7eL);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422115077");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryComaprisionExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.class_(false, true, false);
    b.super_("FirstLanguage.structure.BinaryExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5569c7eL);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422115076");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "BinaryExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5569c7eL);
    b.class_(false, true, false);
    b.super_("FirstLanguage.structure.Expression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255625854");
    b.version(2);
    b.aggregate("left", 0x74b97e2ac5569c7fL).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL).optional(false).ordered(true).multiple(false).origin("8410892501255625855").done();
    b.aggregate("right", 0x74b97e2ac5569c81L).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL).optional(false).ordered(true).multiple(false).origin("8410892501255625857").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "BooleanType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f5aL);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.MyType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f53L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/7662874314529976154");
    b.version(2);
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "DivExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6b35a5cf81124bc8L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryArithmaicOperations", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b05L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/7725263046466227144");
    b.version(2);
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "EmptyStatement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5553643L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.Statement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c1L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255534147");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "EqualExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5569ca1L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255625889");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "Expression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL);
    b.class_(false, true, false);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255604492");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpressionStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "ExpressionStatement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6fa94d688599e262L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.Statement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c1L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8046047320587493986");
    b.version(2);
    b.aggregate("expr", 0x6fa94d688599e263L).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL).optional(false).ordered(true).multiple(false).origin("8046047320587493987").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "GreaterEqualExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d4ffd260L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422002272");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "GreaterThanExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d4ffd25eL);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422002270");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "IntegerType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f54L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.MyType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f53L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/7662874314529976148");
    b.version(2);
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "LessThanEqualExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d4ffd261L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422002273");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "LessThanExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d4ffd25fL);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/1069986690422002271");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "MinusExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55672a3L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryArithmaicOperations", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b05L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255615139");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMulExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "MulExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55672a4L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryArithmaicOperations", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b05L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255615140");
    b.version(2);
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMyType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "MyType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f53L);
    b.class_(false, true, false);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/7662874314529976147");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqualExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "NotEqualExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac557c6b7L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryComaprisionExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b04L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255702199");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumberLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "NumberLiteral", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac5564909L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.Expression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255604489");
    b.version(2);
    b.property("value", 0x74b97e2ac556490aL).type(PrimitiveTypeId.STRING).origin("8410892501255604490").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "PlusExpression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55672a2L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.BinaryArithmaicOperations", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0xed95b39d5018b05L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255615138");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "Statement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c1L);
    b.class_(false, true, false);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255488961");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLateral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "StringLateral", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac557f5a7L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.Expression", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255714215");
    b.version(2);
    b.property("value", 0x74b97e2ac557f5a8L).type(PrimitiveTypeId.STRING).origin("8410892501255714216").done();
    b.alias("\"");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "StringType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f59L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.MyType", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f53L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/7662874314529976153");
    b.version(2);
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "Variable", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c0L);
    b.class_(false, false, false);
    b.super_("FirstLanguage.structure.Statement", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c1L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255488960");
    b.version(2);
    b.aggregate("value", 0x74b97e2ac5564911L).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac556490cL).optional(false).ordered(true).multiple(false).origin("8410892501255604497").done();
    b.aggregate("type", 0xed95b39d52dcf5fL).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x6a57ff96e4062f53L).optional(true).ordered(true).multiple(false).origin("1069986690425016159").done();
    b.alias("var");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWorkbook() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("FirstLanguage", "Workbook", 0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485bfL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:9682daf1-3878-4e7e-93f3-95707e163a48(FirstLanguage.structure)/8410892501255488959");
    b.version(2);
    b.aggregate("content", 0x74b97e2ac55485c4L).target(0x7948aebf5e1b4d63L, 0xb7a7a346bd29db6dL, 0x74b97e2ac55485c1L).optional(true).ordered(true).multiple(true).origin("8410892501255488964").done();
    return b.create();
  }
}
